{"ast":null,"code":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useOnClickOutside } from './useOnClickOutside';\nconst defaultOptions = {\n  closeOnOutsideClick: true\n};\nexport const usePortal = (options = defaultOptions) => {\n  const {\n    0: isOpen,\n    1: setOpen\n  } = useState(false);\n  const latestIsOpen = useRef(isOpen);\n  const refNode = useRef();\n  const syncronizeAndSetOpen = useCallback(value => {\n    latestIsOpen.current = value;\n    setOpen(value);\n  }, []);\n  const open = useCallback(event => {\n    syncronizeAndSetOpen(true);\n  }, [syncronizeAndSetOpen]);\n  const close = useCallback(event => {\n    if (latestIsOpen.current) {\n      syncronizeAndSetOpen(false);\n    }\n  }, [syncronizeAndSetOpen]);\n  const toggle = useCallback(event => {\n    if (latestIsOpen.current) {\n      close(event);\n    } else {\n      open(event);\n    }\n  }, [open, close]);\n\n  const Portal = props => {\n    const portalNode = useRef(document.createElement('div'));\n    useOnClickOutside(portalNode, refNode, event => {\n      if (options.closeOnOutsideClick) {\n        close(event);\n      }\n    });\n    useEffect(() => {\n      const element = portalNode.current;\n      document.body.appendChild(element);\n      return () => {\n        document.body.removeChild(element);\n      };\n    }, []);\n    return createPortal(props.children, portalNode.current);\n  };\n\n  return {\n    open,\n    close,\n    toggle,\n    Portal,\n    isOpen,\n    ref: refNode\n  };\n};","map":null,"metadata":{},"sourceType":"module"}