{"ast":null,"code":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useOnClickOutside } from './useOnClickOutside';\nconst defaultOptions = {\n  closeOnOutsideClick: true\n};\nexport const usePortal = (options = defaultOptions) => {\n  const {\n    0: isOpen,\n    1: setOpen\n  } = useState(false);\n  const latestIsOpen = useRef(isOpen);\n  const refNode = useRef();\n  const syncronizeAndSetOpen = useCallback(value => {\n    latestIsOpen.current = value;\n    setOpen(value);\n  }, []);\n  const open = useCallback(event => {\n    syncronizeAndSetOpen(true);\n  }, [syncronizeAndSetOpen]);\n  const close = useCallback(event => {\n    if (latestIsOpen.current) {\n      syncronizeAndSetOpen(false);\n    }\n  }, [syncronizeAndSetOpen]);\n  const toggle = useCallback(event => {\n    if (latestIsOpen.current) {\n      close(event);\n    } else {\n      open(event);\n    }\n  }, [open, close]);\n\n  const Portal = props => {\n    const portalNode = useRef(document.createElement('div'));\n    useOnClickOutside(portalNode, refNode, event => {\n      if (options.closeOnOutsideClick) {\n        close(event);\n      }\n    });\n    useEffect(() => {\n      const element = portalNode.current;\n      document.body.appendChild(element);\n      return () => {\n        document.body.removeChild(element);\n      };\n    }, []);\n    return createPortal(props.children, portalNode.current);\n  };\n\n  return {\n    open,\n    close,\n    toggle,\n    Portal,\n    isOpen,\n    ref: refNode\n  };\n};","map":{"version":3,"sources":["/Users/sundayfunday/Projects/personal/teleport-components/packages/portal/src/usePortal.ts"],"names":["useState","useEffect","useRef","useCallback","createPortal","useOnClickOutside","defaultOptions","closeOnOutsideClick","usePortal","options","isOpen","setOpen","latestIsOpen","refNode","syncronizeAndSetOpen","value","current","open","event","close","toggle","Portal","props","portalNode","document","createElement","element","body","appendChild","removeChild","children","ref"],"mappings":"AAAA,SAA6CA,QAA7C,EAAuDC,SAAvD,EAAkEC,MAAlE,EAA0EC,WAA1E,QAA6F,OAA7F;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAmBA,MAAMC,cAAuB,GAAG;AAC9BC,EAAAA,mBAAmB,EAAE;AADS,CAAhC;AAIA,OAAO,MAAMC,SAAS,GAAG,CAACC,OAAgB,GAAGH,cAApB,KAAgD;AACvE,QAAM;AAAA,OAACI,MAAD;AAAA,OAASC;AAAT,MAAoBX,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMY,YAAY,GAAGV,MAAM,CAACQ,MAAD,CAA3B;AACA,QAAMG,OAAO,GAAGX,MAAM,EAAtB;AAEA,QAAMY,oBAAoB,GAAGX,WAAW,CAAEY,KAAD,IAAW;AAClDH,IAAAA,YAAY,CAACI,OAAb,GAAuBD,KAAvB;AACAJ,IAAAA,OAAO,CAACI,KAAD,CAAP;AACD,GAHuC,EAGrC,EAHqC,CAAxC;AAKA,QAAME,IAAI,GAAGd,WAAW,CACrBe,KAAD,IAA+B;AAC7BJ,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD,GAHqB,EAItB,CAACA,oBAAD,CAJsB,CAAxB;AAOA,QAAMK,KAAK,GAAGhB,WAAW,CACtBe,KAAD,IAA+B;AAC7B,QAAIN,YAAY,CAACI,OAAjB,EAA0B;AACxBF,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD;AACF,GALsB,EAMvB,CAACA,oBAAD,CANuB,CAAzB;AASA,QAAMM,MAAM,GAAGjB,WAAW,CACvBe,KAAD,IAA+B;AAC7B,QAAIN,YAAY,CAACI,OAAjB,EAA0B;AACxBG,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD,KAFD,MAEO;AACLD,MAAAA,IAAI,CAACC,KAAD,CAAJ;AACD;AACF,GAPuB,EAQxB,CAACD,IAAD,EAAOE,KAAP,CARwB,CAA1B;;AAWA,QAAME,MAAM,GAAIC,KAAD,IAAiD;AAC9D,UAAMC,UAAU,GAAGrB,MAAM,CAACsB,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAD,CAAzB;AAEApB,IAAAA,iBAAiB,CAACkB,UAAD,EAAaV,OAAb,EAAuBK,KAAD,IAAkB;AACvD,UAAIT,OAAO,CAACF,mBAAZ,EAAiC;AAC/BY,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,KAJgB,CAAjB;AAMAjB,IAAAA,SAAS,CAAC,MAAM;AACd,YAAMyB,OAAO,GAAGH,UAAU,CAACP,OAA3B;AACAQ,MAAAA,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0BF,OAA1B;AAEA,aAAO,MAAM;AACXF,QAAAA,QAAQ,CAACG,IAAT,CAAcE,WAAd,CAA0BH,OAA1B;AACD,OAFD;AAGD,KAPQ,EAON,EAPM,CAAT;AASA,WAAOtB,YAAY,CAACkB,KAAK,CAACQ,QAAP,EAAiBP,UAAU,CAACP,OAA5B,CAAnB;AACD,GAnBD;;AAqBA,SAAO;AACLC,IAAAA,IADK;AAELE,IAAAA,KAFK;AAGLC,IAAAA,MAHK;AAILC,IAAAA,MAJK;AAKLX,IAAAA,MALK;AAMLqB,IAAAA,GAAG,EAAElB;AANA,GAAP;AAQD,CAlEM","sourcesContent":["import { ReactNode, ReactPortal, MouseEvent, useState, useEffect, useRef, useCallback } from 'react'\nimport { createPortal } from 'react-dom'\nimport { useOnClickOutside } from './useOnClickOutside'\n\nexport interface Options {\n  closeOnOutsideClick: boolean\n}\n\nexport interface PortalProps {\n  children: ReactNode\n}\n\nexport interface IPortal {\n  ref: { current: any }\n  isOpen: boolean\n  open: (event: MouseEvent) => void\n  close: (event: MouseEvent) => void\n  toggle: (event: MouseEvent) => void\n  Portal: (props: PortalProps) => ReactPortal\n}\n\nconst defaultOptions: Options = {\n  closeOnOutsideClick: true\n}\n\nexport const usePortal = (options: Options = defaultOptions): IPortal => {\n  const [isOpen, setOpen] = useState(false)\n  const latestIsOpen = useRef(isOpen)\n  const refNode = useRef()\n\n  const syncronizeAndSetOpen = useCallback((value) => {\n    latestIsOpen.current = value\n    setOpen(value)\n  }, [])\n\n  const open = useCallback(\n    (event: MouseEvent | Event) => {\n      syncronizeAndSetOpen(true)\n    },\n    [syncronizeAndSetOpen]\n  )\n\n  const close = useCallback(\n    (event: MouseEvent | Event) => {\n      if (latestIsOpen.current) {\n        syncronizeAndSetOpen(false)\n      }\n    },\n    [syncronizeAndSetOpen]\n  )\n\n  const toggle = useCallback(\n    (event: MouseEvent | Event) => {\n      if (latestIsOpen.current) {\n        close(event)\n      } else {\n        open(event)\n      }\n    },\n    [open, close]\n  )\n\n  const Portal = (props: { children: ReactNode }): ReactPortal => {\n    const portalNode = useRef(document.createElement('div'))\n\n    useOnClickOutside(portalNode, refNode, (event: Event) => {\n      if (options.closeOnOutsideClick) {\n        close(event)\n      }\n    })\n\n    useEffect(() => {\n      const element = portalNode.current\n      document.body.appendChild(element)\n\n      return () => {\n        document.body.removeChild(element)\n      }\n    }, [])\n\n    return createPortal(props.children, portalNode.current)\n  }\n\n  return {\n    open,\n    close,\n    toggle,\n    Portal,\n    isOpen,\n    ref: refNode\n  }\n}\n"]},"metadata":{},"sourceType":"module"}