{"ast":null,"code":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useOnClickOutside } from './useOnClickOutside';\nvar defaultOptions = {\n  closeOnOutsideClick: true\n};\nexport var usePortal = function usePortal() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setOpen = _useState[1];\n\n  var latestIsOpen = useRef(isOpen);\n  var refNode = useRef();\n  var syncronizeAndSetOpen = useCallback(function (value) {\n    latestIsOpen.current = value;\n    setOpen(value);\n  }, []);\n  var open = useCallback(function (event) {\n    syncronizeAndSetOpen(true);\n  }, [syncronizeAndSetOpen]);\n  var close = useCallback(function (event) {\n    if (latestIsOpen.current) {\n      syncronizeAndSetOpen(false);\n    }\n  }, [syncronizeAndSetOpen]);\n  var toggle = useCallback(function (event) {\n    if (latestIsOpen.current) {\n      close(event);\n    } else {\n      open(event);\n    }\n  }, [open, close]);\n\n  var Portal = function Portal(props) {\n    var portalNode = useRef(document.createElement('div'));\n    useOnClickOutside(portalNode, refNode, function (event) {\n      if (options.closeOnOutsideClick) {\n        close(event);\n      }\n    });\n    useEffect(function () {\n      var element = portalNode.current;\n      document.body.appendChild(element);\n      return function () {\n        document.body.removeChild(element);\n      };\n    }, []);\n    return createPortal(props.children, portalNode.current);\n  };\n\n  return {\n    open: open,\n    close: close,\n    toggle: toggle,\n    Portal: Portal,\n    isOpen: isOpen,\n    ref: refNode\n  };\n};","map":null,"metadata":{},"sourceType":"module"}